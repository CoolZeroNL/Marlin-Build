name: Build Marlin Firmware

on:
  push:
    branches:
      - main
    # paths:
    #   - 'configuration/*/**.h'



jobs:
  # build_and_push:
    # name: Compile and Push Firmware
    # runs-on: ubuntu-latest
    # env:
    #   BOARD: STM32F103RC_btt_512K

    # steps:
    #   - name: Check out repo
    #     uses: actions/checkout@v2

    #   - name: Compile firmware
    #     run: |
    #       echo "hi"

    #   #     docker run \
    #   #       -u root:root \
    #   #       -e BOARD \
    #   #       -e UPDATE_FORCE=true \
    #   #       -e USE_TAG=2.0.8.1 \
    #   #       -v $(pwd)/Firmware/Builds:/home/platformio/build \
    #   #       -v $(pwd)/Firmware/Configuration:/home/platformio/CustomConfiguration \
    #   #       frealmyr/marlin-build:latest

    #   # - name: Push firmware
    #   #   run: |
    #   #     git config user.name github-actions
    #   #     git config user.email github-actions@github.com
    #   #     git add .
    #   #     git commit -m "Compiled firmware"
    #   #     git push
  build_and_push:
    name: Run All Tests

    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     test-platform:
    #     # Base Environments
    #     - mega2560
    #     # - mega1280

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # - name: Cache pip
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.cache/pip
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-

    # - name: Cache PlatformIO
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.platformio
    #     key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Select Python 3.7
      uses: actions/setup-python@v3
      with:
        python-version: '3.7'     # Version range or exact version of a Python version to use, using semvers version range syntax.
        architecture: 'x64'       # optional x64 or x86. Defaults to x64 if not specified

    - name: Install PlatformIO
      run: |
        pip install -U platformio
        pio upgrade --dev
        pio pkg update --global

    - name: Build Marlin
      run: |
        echo ""

        USE_LATEST_TAG=false            # true / false
        USE_TAG=''                      # 2.1.1
        USE_BRANCH='bugfix-2.1.x'       # bugfix-2.1.x
        BOARD='mega2560ext'                # mega2560 / 

        # git repository
        git clone https://github.com/MarlinFirmware/Marlin.git 

        # Override MarlinFirmware version using branch or tag
        if [[ $USE_LATEST_TAG == true ]] && [[ -z $USE_TAG ]] && [[ -z $USE_BRANCH ]]; then

          printf "\n\e[01;36mUse Latest\e[0m\n"
          cd Marlin/
          git fetch origin
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
          printf "\nYou are now using git tag:\e[01;33m $(git tag --points-at HEAD)\e[0m\n\n"
          cd ..
        
        elif [[ $USE_TAG ]]; then
        
          printf "\n\e[01;36mUse TAG\e[0m\n"
          cd Marlin/
          git fetch origin
          git checkout $USE_TAG
          printf "\nYou are now using git tag:\e[01;33m $(git tag --points-at HEAD)\e[0m\n\n"
          cd ..
        
        elif [[ $USE_BRANCH ]]; then
        
          printf "\n\e[01;36mUse Branch\e[0m\n"
          cd Marlin/
          git fetch origin
          git checkout $USE_BRANCH
          printf "\nYou are now using the latest commit in branch:\e[01;33m $(git branch | sed -n '/\* /s///p')\e[0m\n\n"
          cd ..
        
        else
        
          echo "no option selected!"
          exit 1
        
        fi

        # Check if custom configuration files exists within the docker container
        CONFIG_CHECK=$(ls -1 ./configuration/*/*.h 2>/dev/null | wc -l)
        if [ $CONFIG_CHECK = 0 ]
        then
          printf "\n\e[1;31mNo custom Configuration files detected! \e[0maborting..\n"
          exit 1
        fi        

        # for each machin in Configuration:
        shopt -s dotglob
        find ./configuration/* -prune -type d | while IFS= read -r machine; do
            
            machinename=`echo "$machine" | cut -d'/' -f 3`
            echo "Getting Configuration for: $machinename"

            # Copy custom Configuration files to Marlin folder
            cp $machine/*.h ./Marlin/Marlin/
        
            # Change the default board with value in environment variable
            sed -i "s/default_envs = .*/default_envs = $BOARD/g" ./Marlin/platformio.ini

            cat ./Marlin/platformio.ini

            # Build Marlin firmware
            printf "\e[1;35mCompiling Marlin firmware..\e[0m\n\n"
            platformio run -d Marlin/

            ls -la

            success=$?

            

            # # Override firmware file extension
            # if [ "$FW_EXTENSION" ]; then
            #   printf "\n\e[01;36mOverride Detected\e[0m\n"
            #   printf "Setting firmware file extension to:\e[01;33m $FW_EXTENSION\e[0m\n"
            # else
            #   FW_EXTENSION=bin
            # fi


            # if [[ ${success} -eq 0 ]]; then
            #   OUTPUT_DIR=/home/platformio/build/$BOARD
            #   mkdir -p $OUTPUT_DIR

            #   printf "\nCopying compiled firmware to output folder..\n"
            #   cd /home/platformio/Marlin/.pio/build/$BOARD

            #   if [ $(find . -name "*.${FW_EXTENSION}") ];
            #   then
            #     FIRMWARE_NAME=$(find . -name "*.${FW_EXTENSION}" -type f -exec basename {} .${FW_EXTENSION} ';')
            #     md5sum $FIRMWARE_NAME.$FW_EXTENSION > $OUTPUT_DIR/$FIRMWARE_NAME.md5
            #     cp $FIRMWARE_NAME.$FW_EXTENSION $OUTPUT_DIR

            #     printf "\nValidating firmware checksum.."
            #     if md5sum -c $OUTPUT_DIR/$FIRMWARE_NAME.md5;
            #     then
            #       printf "\e[0mMD5 Checksum Validation: \e[1;32mSucceeded\n"
            #       echo ""
            #       echo "  (\.   \      ,/)"
            #       echo "   \(   |\     )/    Yer done!"
            #       echo "   //\  | \   /\\"
            #       echo "  (/ /\_#oo#_/\ \)   Happy 3D-Printing!"
            #       echo "   \/\  ####  /\/"
            #       echo "        '##'"
            #       echo ""
            #     else
            #       printf "\e[0mMD5 Checksum Validation: \e[1;31mFailed\n"
            #       printf "\n\e[1;31mBuild failed! \e[0mCheck the output above for errors\n"
            #       exit 1
            #     fi
            #   else
            #       printf "\e[0mMD5 Checksum Validation: \e[1;31mFirmware file with $FW_EXTENSION file extension not found!\n"
            #       printf "\n\e[1;31mBuild failed! \e[0mCheck the output above for errors\n"
            #       exit 1
            #   fi
            # else
            #   printf "\n\e[1;31mBuild failed! \e[0mCheck the output above for errors\n"
            #   exit 1
            # fi


        done